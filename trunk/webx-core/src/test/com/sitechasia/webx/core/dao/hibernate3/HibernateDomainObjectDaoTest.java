package com.sitechasia.webx.core.dao.hibernate3;

import java.io.Serializable;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.Expression;
import org.springframework.context.ApplicationContext;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.orm.hibernate3.HibernateTemplate;
import org.springframework.orm.hibernate3.LocalSessionFactoryBean;
import junit.framework.TestCase;
import com.sitechasia.webx.core.support.Page;
import com.sitechasia.webx.core.dao.hibernate3.UsersDO;

	/**
	 * <p>Title: HibernateDomainObjectDaoTest</p>
	 * <p>Description:HibernateDomainObjectDao单元测试类 </p>
	 *
	 * @author mashaojing
	 * @version 1.0
	 */
	public class HibernateDomainObjectDaoTest extends TestCase { 

		HibernateDomainObjectDaoSub dao;
		UsersDO user;
		Connection conn=null;
		Statement statement=null;
		ResultSet rs=null;
		SessionFactory sf;

		public void setUp() throws Exception{
			super.setUp();
			
			DriverManagerDataSource dataSource = new DriverManagerDataSource();
			LocalSessionFactoryBean lsfb = new LocalSessionFactoryBean();
			dataSource.setDriverClassName("org.hsqldb.jdbcDriver");
			dataSource.setUrl("jdbc:hsqldb:.");
			dataSource.setUsername("sa");
			dataSource.setPassword("");
			lsfb.setDataSource(dataSource);
			
			lsfb.setMappingResources(new String[]{"com/sitechasia/webx/core/dao/hibernate3/Users.hbm.xml"});
			
			Properties pros = new Properties();
			pros.put("hibernate.dialect", "org.hibernate.dialect.HSQLDialect");
			pros.put("hibernate.show_sql", "false");
			lsfb.setHibernateProperties(pros);
			
			lsfb.afterPropertiesSet();
				
			sf = (SessionFactory)lsfb.getObject();

			dao = new  HibernateDomainObjectDaoSub();
			dao.setSessionFactory(sf);
			
			HibernateTemplate hibernateTemplate = new HibernateTemplate();
			hibernateTemplate.setSessionFactory(sf);
			
			dao.setHibernateTemplate(hibernateTemplate);
			
			dao.afterPropertiesSet();

			dao.entityClass=UsersDO.class;
			
			conn = sf.openSession().connection();
			statement=conn.createStatement();
			statement.executeUpdate("CREATE TABLE users(userid INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY,username VARCHAR(256), useremail VARCHAR(256))");
			statement.executeUpdate("insert into users values(1,'admin', 'admin@aaaa')");
			statement.executeUpdate("insert into users values(2,'mashaojing', 'mashaojing@ceopen.cn')");
		}

		public void tearDown() throws Exception{
			super.tearDown();
			statement.execute("drop table users");
			statement.close();
			conn.close();
		}

		public void testPagedQuery(){

			String hql="from UsersDO u";
			String psql="from UsersDO u where userid=?";

			Page page = dao.pagedQuery(hql, 1, 10);
			List list=page.getResult();
			Iterator it=list.iterator();
	        user=(UsersDO)it.next();
			assertEquals(user.getUsername(),"admin");
			
			Page page1 = dao.pagedQuery(psql, 1, 10,2);
			List list1=page1.getResult();
			Iterator it1=list1.iterator();
	        user=(UsersDO)it1.next();
			assertEquals(user.getUsername(),"mashaojing");
		}

		public void testFind(){
			List list=dao.find("from UsersDO u where username='admin'");
			Iterator it=list.iterator();
			user=(UsersDO)it.next();
			assertEquals(list.size(),1);

			List list1=dao.find("from UsersDO u where username=?","mashaojing");
			Iterator it1=list1.iterator();
			user=(UsersDO)it1.next();
			assertEquals(user.getUserid().intValue(),2);
		}

		public void testGenericFindBy(){
			List list=dao.genericFindBy(UsersDO.class, "username","mashaojing");
			Iterator it=list.iterator();
			user=(UsersDO)it.next();

			assertEquals(user.getUsername(),"mashaojing");
		}

		public void testGenericFindByLike(){
		List list=dao.genericFindByLike(UsersDO.class,"username","ad");
		Iterator it=list.iterator();
		user=(UsersDO)it.next();
		assertEquals(user.getUsername(),"admin");
		}
		
		public void testPagedQueryCriteria(){

			Session s=sf.openSession();
			Criteria criteria=s.createCriteria(UsersDO.class);
			criteria.add(Expression.eq("username","admin"));
			com.sitechasia.webx.core.support.Page page=dao.pagedQuery(criteria, 1, 10);
	    	List list=page.getResult();
	    	Iterator it=list.iterator();
			user=(UsersDO)it.next();

	    	assertEquals(user.getUsername(),"admin");
	    	assertEquals(page.getTotalCount(),1);
	    	
	    	dao.getEntityCriteria();
		}
		
		public void testGenericFindUniqueBy(){
			user=(UsersDO)dao.genericFindUniqueBy(UsersDO.class,"userid",1);
			assertEquals(user.getUsername(),"admin");
		}
		
		public void testGenericGet(){
			user=(UsersDO)dao.genericGet(UsersDO.class,2);
			assertEquals(user.getUsername(),"mashaojing");
			
			user=(UsersDO)dao.findById(1);
			assertEquals(user.getUsername(),"admin");
			assertEquals(dao.findAll().size(),2);
		}
		
		public void testGenericGetAll(){
			List list=dao.genericGetAll(UsersDO.class);
			assertEquals(list.size(),2);
		}
		
		public void testGenericRemoveById(){
			dao.genericRemoveById(UsersDO.class,1);
			assertNull(dao.genericGet(UsersDO.class,1));
		}
		
		public void testGenericSave(){
			UsersDO userdo=new UsersDO();
			userdo.setUsername("yun");
			dao.genericSave(UsersDO.class,userdo);
			
			dao.doSave(userdo);
		}
		
		public void testGenericSaveAll(){
			List list=new ArrayList();
			UsersDO userdo1=new UsersDO();
			userdo1.setUsername("rose");
			UsersDO userdo2=new UsersDO();
			userdo2.setUsername("hua");
			list.add(userdo1);
			list.add(userdo2);
			dao.genericSaveAll(UsersDO.class, list);
			
			dao.doSaveAll(list);
		}
		
		public void testIsGenericNotUnique(){
			user=(UsersDO)dao.genericFindUniqueBy(UsersDO.class,"userid",1);
			assertFalse(dao.isGenericNotUnique(UsersDO.class, user, "username"));
			assertFalse(dao.isNotUnique(user,"username"));
		}
		
		public void testDoDeleteById(){
			dao.doDeleteById(1);
			assertNull(dao.findById(1));
			dao.doDeleteByIds(new Serializable[]{2});
			assertNull(dao.findById(2));
		}
		
		public void testDoDelete(){
			user=(UsersDO)dao.genericFindUniqueBy(UsersDO.class,"userid",1);
			dao.doDelete(user);
			assertNull(dao.findById(1));
		}
		
		public void testFindBy(){
			assertEquals(dao.findBy("username", "admin").size(),1);
			user=(UsersDO)dao.findUniqueBy("username","mashaojing");
			assertEquals(user.getUserid().intValue(),2);
		}
		
		public void testFindByLike(){
			assertEquals(dao.findByLike("username","jing").size(),1);
		}
	}

