package com.sitechasia.webx.core.dao.jdbc;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

import javax.sql.DataSource;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.datasource.DriverManagerDataSource;

import antlr.collections.List;

import com.sitechasia.webx.core.support.Page;

import junit.framework.TestCase;

public class BaseTemplateDaoTest extends TestCase {
	BaseTemplateDao btdao=new BaseTemplateDaosub();
	Connection conn=null;
	Statement statement=null;
	ResultSet rs=null;
	Object o;
	private JdbcTemplate jt;
	private DriverManagerDataSource dataSource;
	
	public void setUp() throws Exception{
		super.setUp();	
		dataSource=new DriverManagerDataSource();
		dataSource.setDriverClassName("org.hsqldb.jdbcDriver");
		dataSource.setUrl("jdbc:hsqldb:.");
		dataSource.setUsername("sa");
		dataSource.setPassword("");
		btdao.setDataSource(dataSource);
		jt=new JdbcTemplate(dataSource);
	
		btdao.execute("CREATE TABLE user(userid INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY, username VARCHAR(256))");
		btdao.execute("insert into user values(1,'adimin')");
		btdao.execute("insert into user values(2,'mashaojing')");
		btdao.execute("insert into user values(3,'mashaojing')");
		btdao.setJdbcTemplate(jt);}

	public void tearDown() throws Exception{
		super.tearDown();
		btdao.execute("drop table user");
	}
	
	public void testgenericFindObject() throws SQLException, ClassNotFoundException{
		assertEquals(btdao.genericFindObject("select userid from user where userid=1",null).size(),1);
		assertEquals(btdao.genericFindObject("select userid from user where userid=? and username=?",new Object[]{2,"mashaojing"},null).size(),1);
	}
	
	public void testGenericFindFieldInt(){
		assertEquals(btdao.genericFindFieldInt("select userid from user where userid=1").intValue(),1);
		assertEquals(btdao.genericFindFieldInt("select userid from user where userid=?",new Object[]{1}).intValue(),1);
		btdao.setNullEscapeStr("1");
		assertEquals(btdao.genericFindFieldInt("select userid from user where userid=?",new Object[]{1}).intValue(),1);
		
	}
	
	public void testPagedQueryObject(){
		Page page=btdao.pagedQueryObject("select username from user", null, 2, 2);
		assertEquals(page.getStartIndex(),2);
		Page page1=btdao.pagedQueryObject("select username from user where userid=1", null, 0, 2);
		assertEquals(page1.getStartIndex(),0);
		
		Page page5=btdao.pagedQueryObject("select username from user", new Object[]{},null, 2, 2);
		assertEquals(page5.getStartIndex(),2);
		
		IPageSqlProvider pagesqlprovider=new PageSqlProviderImpl();
		btdao.setPageSqlProvider(pagesqlprovider);
		
		Page page2=btdao.pagedQueryObject("select username from user", null, 2, 2);
		assertEquals(page2.getStartIndex(),2);
		Page page3=btdao.pagedQueryObject("select username from user where userid=2", null, 0, 2);
		assertEquals(page3.getStartIndex(),0);
				
		Page page4=btdao.pagedQueryObject("select username from user", new Object[]{},null, 2, 2);
		assertEquals(page4.getStartIndex(),2);
		Page page7=btdao.pagedQueryObject("select username from user where userid=?", new Object[]{2},null, 0, 2);
		assertEquals(page7.getStartIndex(),0);
				
	}
	
	public void testPagedQueryMap(){
		Page page=btdao.pagedQueryMap("select * from user",2,2);
		assertEquals(page.getCurrentPageNo(),2);
		Page page3=btdao.pagedQueryMap("select * from user",new Object[]{},2,2);
		assertEquals(page3.getCurrentPageNo(),2);
		
		IPageSqlProvider pagesqlprovider=new PageSqlProviderImpl();
		btdao.setPageSqlProvider(pagesqlprovider);
		Page page1=btdao.pagedQueryMap("select * from user",2,2);
		assertEquals(page1.getCurrentPageNo(),2);
		
		Page page2=btdao.pagedQueryMap("select * from user",0,2);
		assertEquals(page2.getCurrentPageNo(),1);
		Page page4=btdao.pagedQueryMap("select * from user",new Object[]{},2,2);
		assertEquals(page4.getCurrentPageNo(),2);
		Page page5=btdao.pagedQueryMap("select * from user",new Object[]{},0,2);
		assertEquals(page5.getCurrentPageNo(),1);
	}
	
	public void testGenericFindMap(){
		assertEquals(btdao.genericFindMap("select * from user").size(),3);
		Map map1=(Map)btdao.genericFindMap("select * from user").get(1);
		
		assertEquals(btdao.genericFindMap("select userid from user where username=?",new String[]{"mashaojing"}).size(),2);
		
	}
	
	public void testGenericFindRowObject(){
		btdao.genericFindRowObject("select * from user where username='mashaojing'",null);
		assertNull(btdao.genericFindRowObject("select * from user where username='majing'",null));

		btdao.genericFindRowObject("select * from user where username=?",new Object[]{"mashaojing"},null);
		assertNull(btdao.genericFindRowObject("select * from user where username=?",new Object[]{"majing"},null));
	
	}
	
	public void testGenericFindRowMap(){
		String[] keys=new String[]{"USERID,USERNAME"};
		String[] values=new String[]{"3,mashaojing"};
		Map map=btdao.genericFindRowMap("select * from user where userid=3");
		int mapsize=map.size();
		Iterator it=map.entrySet().iterator();
		Map map1=btdao.genericFindRowMap("select * from user where userid=?",new Object[]{1});
		assertEquals(map1.size(),2);
	}
	
	public void testGenericFindField(){
		assertEquals(btdao.genericFindField("select userid from user",Integer.class).size(),3);
		assertEquals(btdao.genericFindField("select username from user where userid=?",new Object[]{1},String.class).size(),1);
	}
	
	public void testgenericFindFieldObject(){
		btdao.genericFindFieldObject("select userid from user", Integer.class);
		btdao.genericFindFieldObject("select userid from user",new Object[]{}, Integer.class);
		btdao.genericFindFieldObject("select userid from user where username='admin'", Integer.class);
		btdao.genericFindFieldObject("select userid from user where username=?", new Object[]{"admin"},Integer.class);
		
	}
	
	public void testGenericUpdate(){
		assertEquals(btdao.genericUpdate("update user set username='jing' where username='mashaojing'"),2);

		assertEquals(btdao.genericUpdate("update user set username='shaojing' where username=?",new Object[] {"jing"}),2);
		assertEquals(btdao.genericUpdate("update user set username='mashaojing' where username=?",new Object[] {"shaojing"},new int[]{java.sql.Types.VARCHAR}),2);
		
		
	}
	
	public void testPagedQueryField(){
		Page page=btdao.pagedQueryField("select userid from user",Integer.class,1,2);
		assertEquals(page.getCurrentPageNo(),1);
		Page page3=btdao.pagedQueryField("select userid from user",new Object[]{},Integer.class,1,2);
		assertEquals(page3.getCurrentPageNo(),1);
				
		IPageSqlProvider pagesqlprovider=new PageSqlProviderImpl();
		btdao.setPageSqlProvider(pagesqlprovider);
		Page page1=btdao.pagedQueryField("select userid from user",String.class,1,2);
		assertEquals(page1.getCurrentPageNo(),1);
		Page page2=btdao.pagedQueryField("select userid from user",String.class,0,2);
		assertEquals(page2.getCurrentPageNo(),1);
		Page page4=btdao.pagedQueryField("select userid from user",new Object[]{},String.class,1,2);
		assertEquals(page4.getCurrentPageNo(),1);
		Page page5=btdao.pagedQueryField("select userid from user",new Object[]{},String.class,0,2);
		assertEquals(page5.getCurrentPageNo(),1);
	}
	
	public void testGenericBatchUpdate(){
		String[] sql=new String[]{"update user set username='jing' where username='mashaojing'","update user set username='mashaojing' where userid=1"};
		assertEquals(btdao.genericBatchUpdate(sql)[0],2);
		assertEquals(btdao.genericBatchUpdate(sql)[1],1);
		ArrayList list=new ArrayList();
		list.add(new Object[]{"jing"});
		list.add(new Object[]{"mashaojing"});
		//list.add("mashaojing");
		assertEquals(btdao.genericBatchUpdate("update user set username='majing' where username=?",list)[0],2);
	}
	public class BaseTemplateDaosub extends BaseTemplateDao{

		@Override
		protected Object mappingRow(ResultSet rs, int index, Object parameter) throws SQLException {
			// TODO Auto-generated method stub
			return null;
		}
	}
	
	private class PageSqlProviderImpl implements IPageSqlProvider {
		public String getPageSql(String oldSqlStr, int firstResult, int numOfRows) {
		// TODO Auto-generated method stub
		return "select username from user where userid=3";
	}
	}
}
